openapi: "3.0.3"

info:
  title: xyz class management
  description: class management tools for every school
  version: 1.0.0

servers:
  - url: http://localhost:8080/api

paths:
  /v1/students/profile:
    get:
      tags:
        - students profile
      summary: get students information
      responses:
        "200":
          description: get all students information
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                  status:
                    type: string
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/students-profile"
                    minItems: 0
        "500":
          $ref: "#/components/responses/500"

  /v1/students/profile/{id}:
    get:
      tags:
        - students profile
      summary: get a student information
      parameters:
        - $ref: "#components/parameters/id"
      responses:
        "200":
          description: get a student information success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/students-profile"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /v1/students:
    get:
      tags:
        - students
      summary: get students only data information
      responses:
        "200":
          description: get students only data information success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/students"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - students
      summary: create a new student
      requestBody:
        $ref: "#/components/requestBodies/insertOrUpdateStudents"
      responses:
        "200":
          description: create a new student success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "OK"
                  data:
                    $ref: "#components/schemas/insertOrUpdateStudents"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"

  /v1/students/{id}:
    get:
      tags:
        - students
      summary: get a student only data information
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: get a student only data success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/students"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      summary: update a student information
      tags:
        - students
      parameters:
        - $ref: "#components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/insertOrUpdateStudents"
      responses:
        "200":
          description: update a student information success
          content:
            application/json:
              schema:
                $ref: "#components/schemas/insertOrUpdateStudents"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - students
      summary: delete a student data only
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: delete a student data success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delete"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  /v1/classes:
    get:
      tags:
        - classes
      summary: get classes data
      responses:
        "200":
          description: get classes data success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/classes"
        "500":
          $ref: "#/components/responses/500"
    post:
      tags:
        - classes
      summary: add classes data
      requestBody:
        $ref: "#/components/requestBodies/insertOrUpdateClasses"
      responses:
        "200":
          description: add classes data success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/insertOrUpdateClasses"
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"

  /v1/classes/{id}:
    get:
      summary: get a specific class
      tags:
        - classes
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: get a specific class success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/classes"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    patch:
      summary: update a class information
      tags:
        - classes
      parameters:
        - $ref: "#components/parameters/id"
      requestBody:
        $ref: "#/components/requestBodies/insertOrUpdateClasses"
      responses:
        "200":
          description: update a class information success
          content:
            application/json:
              schema:
                $ref: "#components/schemas/insertOrUpdateClasses"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    delete:
      tags:
        - classes
      summary: delete a class data only
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: delete a student data success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/delete"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"

  # /v1/studies/:
  #   post:
  #     tags:
  #       - studies
  #     summary: add a study data
  #     requestBody:
  #       $ref: "#/components/requestBodies/insertOrUpdateStudies"
  #     responses:
  #       "200":
  #         description: add a study data success
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/insertOrUpdateStudies"

components:
  schemas:
    classes:
      type: object
      properties:
        _id:
          type: string
          example: as8ohr43843n
        name:
          type: string
          example: mathematics
        room:
          type: string
          nullable: true
          example: online
        students:
          type: array
          items:
            $ref: "#/components/schemas/students"
        instructors:
          type: array
          items:
            $ref: "#/components/schemas/instructors"
          minimum: 0
        assignments:
          type: array
          items:
            $ref: "#/components/schemas/assignments"
        status:
          type: string
          enum:
            - scheduled
            - ongoing
            - completed
            - cancelled
          default: scheduled
          example: scheduled
        notes:
          type: string
          example: trial class for newcomers
          nullable: true
      minProperties: 2
      additionalProperties: false

    instructors:
      type: object
      properties:
        _id:
          type: string
          example: n2kohvj23kl
        name:
          type: string
          example: "Noora"
        created_date:
          type: string
          format: date-time
        updated_date:
          type: string
          format: date-time
      minProperties: 2
      maxProperties: 5
      additionalProperties: false

    students:
      type: object
      properties:
        _id:
          type: string
          example: b12asdf23ksa3
        name:
          type: string
          example: Joko
        created_date:
          type: string
          format: date-time
        updated_date:
          type: string
          format: date-time

    students-profile:
      type: object
      properties:
        _id:
          type: string
          example: b12asdf23ksa3
        name:
          type: string
          example: "Joko"
        classes:
          type: array
          items:
            $ref: "#/components/schemas/classes"
        created_date:
          type: string
          format: date-time
        updated_date:
          type: string
          format: date-time
      minProperties: 5
      maxProperties: 5
      additionalProperties: false

    assignments:
      type: object
      properties:
        _id:
          type: string
          example: f289huiayf98as
        name:
          type: string
          example: Practice yoga
        due:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - todo
            - working
            - done
          default: todo
          example: todo
        grade:
          type: number
          minimum: 0
          maximum: 100
          nullable: true
          default: null
          example: 80
      minProperties: 2
      additionalProperties: false

    errors:
      type: object
      properties:
        code:
          type: number
        status:
          type: string
        data:
          type: object
          properties:
            error:
              type: string

    insertOrUpdateStudents:
      type: object
      properties:
        name:
          type: string
          example: "Joko"

    insertOrUpdateClasses:
      type: object
      properties:
        name:
          type: string
          example: mathematics
        room:
          type: number
          example: 1
        status:
          type: string
          enum:
            - scheduled
            - ongoing
            - completed
            - cancelled
          default: scheduled
          example: scheduled
        notes:
          type: string
          example: trial class for newcomers
          nullable: true

    insertOrUpdateStudies:
      type: object
      properties:
        class_id:
          type: string
        student_id:
          type: string
        instructor_id:
          type: string
        assignment_id:
          type: string
      required:
        - class_id

    delete:
      type: object
      properties:
        code:
          type: number
        status:
          type: string

  parameters:
    id:
      in: path
      name: id
      required: true
      schema:
        type: number
        minimum: 1
      description: id of specified resource

  requestBodies:
    insertOrUpdateStudents:
      description: Request body to insert and update students
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/insertOrUpdateStudents"
    insertOrUpdateClasses:
      description: Request body to insert and update classes
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/insertOrUpdateClasses"
    insertOrUpdateStudies:
      description: Request body to insert and update studies
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/insertOrUpdateStudies"

  responses:
    "400":
      description: Wrong input from the client
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            code: 400
            status: Bad Request
            data:
              error: column.ID validation error
    "401":
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            code: 401
            status: Unauthorized
            data:
              error: No token provided
    "404":
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            code: 404
            status: Not Found
            data:
              error: User ID x8934yhf is not found!
    "500":
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/errors"
          example:
            code: 500
            status: Internal Server Error
            data:
              error: pg.Name is not integer!
